name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create deployment tag
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "deploy-$(date +%Y%m%d-%H%M%S)" -m "Deployment $(date +%Y-%m-%d_%H:%M:%S)"
        git push origin "deploy-$(date +%Y%m%d-%H%M%S)"

    - name: Deploy to production server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /home/privacynumber
          
          # Create backup of current deployment
          echo "Creating backup of current deployment..."
          if [ -d ".backup" ]; then
            rm -rf .backup
          fi
          mkdir -p .backup
          cp -r . .backup/ 2>/dev/null || true
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/main
          
          # Set environment variables
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          export SMS_MAN_API_KEY="${{ secrets.SMS_MAN_API_KEY }}"
          export NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
          export NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}"
          export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
          export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
          export NODE_ENV="production"
          
          # Deploy using production script
          chmod +x deploy-production.sh
          ./deploy-production.sh
          
          # Verify deployment
          chmod +x verify-deployment.sh
          ./verify-deployment.sh

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}